// The N Queens Problem
#include <iostream>
#include <cmath>
using namespace std;

bool ok(int b[], int c){  //Checks if queen placement is ok, just like 1D Queens with goto
    for(int i = 0; i < c; i++){
        if(b[i] == b[c] || (c - i) == abs(b[c] - b[i])){ 
          return false; 
          }
    }
    return true;
}

//This function should return the number of solutions for the given board size
//(you don't need to print the solutions).
int nqueens(int n) {
  //Dynamically declare an array of size n and initialize the first element to 0.
  int* q = new int[n];
  q[0] = 0;

  //Reuse the code from your 1D 8 queens program to find the solutions (may need updates).
  int c = 0, solutions = 0;
    while (c >= 0) {
      if (c == n - 1) {
        solutions++;
        c--;
      }
      else
        q[++c] = -1;
      while (c >= 0) {
        ++q[c];  //Move to the next row
        if (q[c] == n)
          c--;
        else if (ok(q, c))
          break;  //Else check with the "ok" function to see if the sequence is okay. If the sequence is valid, go back to the beginning of the outer loop.
      }
    }
  delete[] q;  //Delete the array.
  return solutions;  //Return the number of solutions.
}

int main() {
    /*
    // When asking for the user to enter the nth integer.
    int n;
    int num = 0;
    cout << "n =  ";
    cin >> n;
    for(int i = 1 ; i <= n ; i++)  
    */   
    
    int n = 8;
    for (int i = 1; i <= n; ++i)
        cout << "There are " << nqueens(i) << " solutions to the " << i << " queens problem.\n";
  return 0;
}
