#include <iostream>
using namespace std;

void printMatching(int q[]){
    static int solution = 0;
   cout << "Solution " << ++solution << endl;
   cout << "Man Woman" << endl;
   for (int i = 0; i < 3; i++) {
        cout << "  " << i << "  " << q[i] << endl;
   }
        cout << endl << endl;
}
  
bool ok(int q[], int col){  

    //mp = man's preference; wp = women's preference
    //mp[i][j] gives man i's ranking of woman j
    //lower value implies higher ranking
    int mp[3][3] = {{0,2,1},   //man 0 likes woman 0 the most and woman 1 the least.
                    {0,2,1},
                    {1,2,0}};   

    int wp[3][3] = {{2,1,0},
                    {0,1,2},
                    {2,0,1}};

    //cm = a currently assigned man
    //cw = a currently assigned woman
    //nm = new man
    //nw = new woman
    //nm and nw are the proposed pair to add to the match

    int cm, cw, nm, nw;

    nm = col; //new man
    nw = q[col]; // new woman
    /*
       Check the new pair (new man, new woman) against each existing pair consisting of
       (current man, current woman) to see if the new pair would make the match unstable.
    */
    for (int i = 0; i < col; i++) {
        cm = i; // current man
        cw = q[cm]; //current woman 

        if(cw == nw) return false; // check to see of the pair works 

        //   a. if the current man prefers the new woman to his partner and
        //   b. if the new woman prefers the current man to her partner, reject
        if((mp[cm][nw] < mp[cm][cw]) 
        && (wp[nw][cm] < wp[nw][nm])) return false;

        //   c. if the new man prefers the current woman to his partner and
        //   d. if the current woman prefers the new man to her partner, reject
        if((mp[nm][cw] < mp[nm][nw])
        && (wp[cw][nm] < wp[cw][cm])) return false;
    }

    return true; //since the pair nm & nw do not introduce an instability
}

int main() {

    //Start with the first male
    int newMan = 0;
    int q[3] = {0};
    // While we have not backtracked beyond the first male:
    while (newMan >= 0){
           newMan++;

        // If all the people have been matched, 
        if(newMan == 3){
            printMatching(q);// print 
            // backtrack
            newMan--;
        }
        else
            q[newMan] = -1;
            //Otherwise, move to the one before the first row

        while(newMan >= 0){  //reset new woman to starting value
            q[newMan]++; // move to the next man

        //check if the q is stable
        if(q[newMan] == 3)
            newMan--;

        else if(ok(q, newMan)) 
                break; // call the ok function, and go back to beginning of the outer loop
        }
    }
    return 0;
}
